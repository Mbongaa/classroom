import { GoogleGenerativeAI } from '@google/generative-ai';

/**
 * Structured learning content generated by AI
 */
export interface LearningContent {
  summary: {
    title: string;
    key_points: string[];
  };
  thematic_breakdown: Array<{
    theme_title: string;
    theme_content: string;
  }>;
}

/**
 * Request parameters for learning content generation
 */
export interface LearningContentRequest {
  transcript: string; // Full combined transcript text
  targetLanguage: string; // ISO language code (e.g., 'en', 'es', 'ar')
  roomName: string; // Room name for context
  teacherName?: string; // Optional teacher name for personalization
}

/**
 * LearningContentGenerator
 *
 * Transforms raw transcripts into structured educational content using Gemini AI.
 * Implements single-call optimization with comprehensive prompt engineering.
 *
 * Features:
 * - Multi-lingual support (translates everything to target language)
 * - Thematic content organization
 * - Key takeaways extraction
 * - JSON-structured output for reliable parsing
 */
export class LearningContentGenerator {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenerativeAI(apiKey);
    // Use gemini-2.5-flash for fast, cost-effective processing
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
  }

  /**
   * Generate structured learning content from transcript
   *
   * @param request - Learning content generation request
   * @returns Promise<LearningContent> - Structured educational content
   * @throws Error if generation fails or response is invalid
   */
  async generate(request: LearningContentRequest): Promise<LearningContent> {
    const { transcript, targetLanguage, roomName, teacherName } = request;

    // Validate inputs
    if (!transcript || transcript.trim().length === 0) {
      throw new Error('Transcript cannot be empty');
    }

    if (!targetLanguage) {
      throw new Error('Target language must be specified');
    }

    // Build comprehensive prompt
    const prompt = this.buildPrompt(transcript, targetLanguage, roomName, teacherName);

    try {
      console.log('[LearningContentGenerator] Generating content for:', {
        roomName,
        targetLanguage,
        transcriptLength: transcript.length,
        teacherName: teacherName || 'Unknown',
      });

      const result = await this.model.generateContent(prompt);
      const response = result.response.text();

      // Parse and validate response
      const learningContent = this.parseResponse(response);

      console.log('[LearningContentGenerator] ✅ Successfully generated learning content:', {
        keyPoints: learningContent.summary.key_points.length,
        themes: learningContent.thematic_breakdown.length,
      });

      return learningContent;
    } catch (error) {
      console.error('[LearningContentGenerator] ❌ Generation failed:', error);

      // Return fallback content instead of throwing
      return this.createFallbackContent(transcript, targetLanguage, roomName);
    }
  }

  /**
   * Build comprehensive Gemini prompt for learning content generation
   */
  private buildPrompt(
    transcript: string,
    targetLanguage: string,
    roomName: string,
    teacherName?: string,
  ): string {
    // Language names for better prompt clarity
    const languageNames: Record<string, string> = {
      en: 'English',
      es: 'Spanish (Español)',
      fr: 'French (Français)',
      de: 'German (Deutsch)',
      ja: 'Japanese (日本語)',
      cmn: 'Chinese (中文)',
      ar: 'Arabic (العربية)',
    };

    const targetLanguageName = languageNames[targetLanguage] || targetLanguage;
    const teacherInfo = teacherName ? ` by ${teacherName}` : '';

    return `You are an expert instructional designer tasked with transforming a lecture transcript into a high-quality, structured learning guide for students.

**Context:**
- Lecture Room: ${roomName}
- Teacher: ${teacherName || 'Unknown'}
- Target Language: ${targetLanguageName}

**Your Task:**
Based on the source transcript below, create a comprehensive learning guide that helps students understand and engage with the material. Your entire response must be in ${targetLanguageName}.

**Source Transcript:**
"""
${transcript}
"""

**Instructions:**
1. **Create a Summary Section:**
   - Generate a title for the summary (e.g., "Key Takeaways" or "Summary")
   - Extract 3-5 most important points, arguments, or conclusions
   - Write each point as a clear, concise bullet point

2. **Create Thematic Sections:**
   - Analyze the transcript and identify the main themes or topics discussed
   - For each theme:
     * Create a clear, descriptive title
     * Write a coherent explanation that combines relevant portions from the transcript
     * Ensure the content flows logically and is easy to understand
   - Aim for 3-6 thematic sections depending on content complexity

3. **Translation:**
   - Translate ALL generated content (titles, bullet points, theme content) into ${targetLanguageName}
   - Use natural, fluent language appropriate for students
   - Maintain academic tone while being accessible

**Required JSON Output Format:**
Return ONLY a valid JSON object with NO markdown, NO code blocks, NO explanations. Use this EXACT structure:

{
  "summary": {
    "title": "Translated title for the summary section",
    "key_points": [
      "First key point in ${targetLanguageName}",
      "Second key point in ${targetLanguageName}",
      "Third key point in ${targetLanguageName}"
    ]
  },
  "thematic_breakdown": [
    {
      "theme_title": "Translated title for first theme",
      "theme_content": "Comprehensive explanation of the first theme in ${targetLanguageName}. This should be a full paragraph or multiple paragraphs that explain the concept clearly and thoroughly."
    },
    {
      "theme_title": "Translated title for second theme",
      "theme_content": "Comprehensive explanation of the second theme in ${targetLanguageName}."
    }
  ]
}

**Important Requirements:**
- Return ONLY the JSON object
- NO markdown code blocks (\`\`\`json)
- NO additional text before or after the JSON
- Ensure all text is in ${targetLanguageName}
- Make content educational and student-friendly
- Focus on clarity and understanding

Begin your response with the opening brace { of the JSON object.`;
  }

  /**
   * Parse and validate Gemini API response
   */
  private parseResponse(response: string): LearningContent {
    try {
      // Remove potential markdown code blocks
      let cleanedResponse = response.trim();
      cleanedResponse = cleanedResponse.replace(/```json\n?|\n?```/g, '');
      cleanedResponse = cleanedResponse.trim();

      // Parse JSON
      const parsed = JSON.parse(cleanedResponse);

      // Validate structure
      if (!parsed.summary || !parsed.summary.title || !Array.isArray(parsed.summary.key_points)) {
        throw new Error('Invalid summary structure');
      }

      if (!Array.isArray(parsed.thematic_breakdown) || parsed.thematic_breakdown.length === 0) {
        throw new Error('Invalid thematic_breakdown structure');
      }

      // Validate each theme
      for (const theme of parsed.thematic_breakdown) {
        if (!theme.theme_title || !theme.theme_content) {
          throw new Error('Invalid theme structure: missing title or content');
        }
      }

      // Ensure minimum quality
      if (parsed.summary.key_points.length === 0) {
        throw new Error('Summary must have at least one key point');
      }

      return parsed as LearningContent;
    } catch (error) {
      console.error('[LearningContentGenerator] Failed to parse response:', error);
      console.error('[LearningContentGenerator] Raw response:', response.substring(0, 500));
      throw new Error(
        `Failed to parse AI response: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );
    }
  }

  /**
   * Create fallback content when AI generation fails
   * Returns formatted raw transcript as learning content
   */
  private createFallbackContent(
    transcript: string,
    targetLanguage: string,
    roomName: string,
  ): LearningContent {
    console.warn('[LearningContentGenerator] Using fallback content');

    // Language-specific fallback titles
    const fallbackTitles: Record<string, { summary: string; content: string }> = {
      en: { summary: 'Lecture Summary', content: 'Lecture Content' },
      es: { summary: 'Resumen de la Lección', content: 'Contenido de la Lección' },
      fr: { summary: 'Résumé du Cours', content: 'Contenu du Cours' },
      de: { summary: 'Zusammenfassung der Vorlesung', content: 'Vorlesungsinhalt' },
      ja: { summary: '講義の概要', content: '講義内容' },
      cmn: { summary: '讲座摘要', content: '讲座内容' },
      ar: { summary: 'ملخص المحاضرة', content: 'محتوى المحاضرة' },
    };

    const titles = fallbackTitles[targetLanguage] || fallbackTitles.en;

    return {
      summary: {
        title: titles.summary,
        key_points: [
          'AI processing is temporarily unavailable',
          'Full transcript is provided below for your review',
          'Please contact support if you continue to see this message',
        ],
      },
      thematic_breakdown: [
        {
          theme_title: titles.content,
          theme_content: transcript,
        },
      ],
    };
  }

  /**
   * Estimate token count for transcript (rough approximation)
   * Used for validation and cost estimation
   */
  static estimateTokenCount(text: string): number {
    // Rough estimate: 1 token ≈ 4 characters for English
    // More conservative for other languages
    return Math.ceil(text.length / 3.5);
  }

  /**
   * Check if transcript is within acceptable size limits
   */
  static isTranscriptSizeAcceptable(transcript: string, maxTokens = 32000): boolean {
    const estimatedTokens = this.estimateTokenCount(transcript);
    return estimatedTokens <= maxTokens;
  }
}
